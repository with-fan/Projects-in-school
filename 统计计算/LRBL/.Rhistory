library(LRBL)
?CV_split
help(package = "LRBL")
library(available)
available(LRBL)
available("LRBL")
devtools::document()
library(LRBL)
help(package = "LRBL")
library(devtools)
library(roxygen2)
library(available)
devtools::document()
use_mit_license()
usethis::use_gpl3_license("fanyang")
library(LRBL)
devtools::document()
devtools::document()
library(LRBL)
?CV_split
library(LRBL)
?CV_param
?CV_split
library(LRBL)
?CV_param
library(LRBL)
?CV_param
library(LRBL)
?finial_test
usethis::use_package("tidyverse")
usethis::use_package("tidymodels")
usethis::use_package("magrittr")
library(LRBL)
library(LRBL)
import magrittr
@import magrittr
library(LRBL)
?finial_test
library(LRBL)
?finial_test
library(LRBL)
?finial_test
library(LRBL)
library(LRBL)
library(LRBL)
library(LRBL)
usethis::use_package("dplyr")
usethis::use_package("magrittr")
usethis::use_package("tibble")
usethis::use_package("yardstick")
library(LRBL)
library(LRBL)
library(LRBL)
library(LRBL)
usethis::use_package("purrr")
library(LRBL)
library(LRBL)
library(LRBL)
library(LRBL)
library(LRBL)
library(LRBL)
data
data()
names(iris)
unique(iris$Species)
library(LRBL)
dat = iris %>%
filter(Species != setosa)
dat$Species = ifelse(dat$Species == versicolor,0,1)
library(magrittr)
dat = iris %>%
+ filter(Species != setosa)
iris %>% filter
iris %>% filter(Species != setosa)
names(iris)
iris %>% filter(Species != "setosa")
iris
iris %>% filter(Species!="virginica")
data("iris")
iris %>% filter(Species!="virginica")
library(dplyr)
iris %>% filter(Species!="virginica")
iris %>% filter(Species!=virginica)
iris %>% filter(Species!="setosa")
dat = iris %>% filter(Species!="setosa")
dat$Species = ifelse(dat$Species == versicolor,0,1)
dat$Species = ifelse(dat$Species == "versicolor",0,1)
str(dat)
rm(list = ls())
library(LRBL)
library(LRBL)
library(LRBL)
library(LRBL)
library(LRBL)
iris %>%
filter(Species != "setosa")
usethis::use_pipe()
library(LRBL)
library(LRBL)
library(LRBL)
dat = iris %>%
+   filter(Species != "setosa")
iris %>% filter(Species != "setosa")
dat = iris %>%
+   filter(Species != "setosa")
iris %>% filter(Species != "setosa")
dat = iris %>% filter(Species != "setosa")
iris %>% filter(Species != "setosa")
library(LRBL)
dat = iris %>% filter(Species != "setosa")
library(LRBL)
library(LRBL)
?fliter
?filter
library(LRBL)
library(LRBL)
library(LRBL)
dat = iris %>% dplyr::filter(Species != "setosa")
library(LRBL)
CV_split(dat,10,10)
dat
CV_split(10,100,2020)
CV_split(10,100,10)
a = CV_split(10,100,10)
a
library(LRBL)
dat = iris %>% dplyr::filter(Species != "setosa")
penalty = 10^seq(-4, -1, length.out = 10)
cv_list = CV_split(10,100,2020)
k = k
k = 10
n = 10
dataset = dat
# dataset = df_train
cv.auc = matrix(NA,k,n)
# n个超参数
for (i in 1:n){
lambda = penalty[i]
print(i)
# k折交叉验证，轮流做验证集
for (j in 1:k){
# 划分训练验证
# j = 1
# dataset = df_train
train_dat = dataset[-cv_list[[j]],]
validation_dat = dataset[cv_list[[j]],]
X_val = cbind(rep(1,nrow(validation_dat)),
validation_dat[,-ncol(validation_dat)]) %>%
as.matrix()
Y_val = validation_dat[ncol(validation_dat)] %>% as_vector()
# k-1折训练
X_train = cbind(rep(1,nrow(train_dat)),
train_dat[,-ncol(train_dat)]) %>%
as.matrix()
Y_train = train_dat[,ncol(train_dat)] %>% as_vector()
maxIterNum = 10000              # 最大迭代数
step = 0.01                    # 学习步长
W = rep(0, ncol(X_train))       # 初始参数值
m = nrow(X_train)
sigmoid = function(z) { 1 / (1 + exp(-z))}  # sigmoid函数
for (l  in 1:maxIterNum){
grad = t(X_train) %*% (sigmoid(X_train %*% W)-Y_train)# 梯度
if (sqrt(as.numeric(t(grad) %*% grad)) < 1e-8){
print(sprintf('iter times=%d', l))
break
}
W = W - grad * step - step*lambda*sign(W)
}
W
# 1折验证
Y_val_pred_prob = sigmoid(X_val %*% round(W,3))
hfunc = function(a) {if (a > 0.5) return(1) else return (0)}
Y_val_pred_class = apply(sigmoid(X_val  %*%
round(W,3)), 1, hfunc)
val_bind = cbind(Y_val,
cbind(Y_val_pred_class,Y_val_pred_prob)) %>%
as.data.frame() %>%
mutate(Y_val = factor(Y_val),
Y_pred_prob_1 = 1-V3)
names(val_bind) = c("Y_val","Y_val_pred_class",
"Y_val_pred_prob_0", "Y_val_pred_prob_1")
val_bind = tibble(val_bind)
# val_bind
# print(val_bind)
auc = roc_auc(val_bind,Y_val,Y_val_pred_prob_1)
# auc
cv.auc[j,i] = auc[[3]]
}
}
library(tidyverse)
# n个超参数
for (i in 1:n){
lambda = penalty[i]
print(i)
# k折交叉验证，轮流做验证集
for (j in 1:k){
# 划分训练验证
# j = 1
# dataset = df_train
train_dat = dataset[-cv_list[[j]],]
validation_dat = dataset[cv_list[[j]],]
X_val = cbind(rep(1,nrow(validation_dat)),
validation_dat[,-ncol(validation_dat)]) %>%
as.matrix()
Y_val = validation_dat[ncol(validation_dat)] %>% as_vector()
# k-1折训练
X_train = cbind(rep(1,nrow(train_dat)),
train_dat[,-ncol(train_dat)]) %>%
as.matrix()
Y_train = train_dat[,ncol(train_dat)] %>% as_vector()
maxIterNum = 10000              # 最大迭代数
step = 0.01                    # 学习步长
W = rep(0, ncol(X_train))       # 初始参数值
m = nrow(X_train)
sigmoid = function(z) { 1 / (1 + exp(-z))}  # sigmoid函数
for (l  in 1:maxIterNum){
grad = t(X_train) %*% (sigmoid(X_train %*% W)-Y_train)# 梯度
if (sqrt(as.numeric(t(grad) %*% grad)) < 1e-8){
print(sprintf('iter times=%d', l))
break
}
W = W - grad * step - step*lambda*sign(W)
}
W
# 1折验证
Y_val_pred_prob = sigmoid(X_val %*% round(W,3))
hfunc = function(a) {if (a > 0.5) return(1) else return (0)}
Y_val_pred_class = apply(sigmoid(X_val  %*%
round(W,3)), 1, hfunc)
val_bind = cbind(Y_val,
cbind(Y_val_pred_class,Y_val_pred_prob)) %>%
as.data.frame() %>%
mutate(Y_val = factor(Y_val),
Y_pred_prob_1 = 1-V3)
names(val_bind) = c("Y_val","Y_val_pred_class",
"Y_val_pred_prob_0", "Y_val_pred_prob_1")
val_bind = tibble(val_bind)
# val_bind
# print(val_bind)
auc = roc_auc(val_bind,Y_val,Y_val_pred_prob_1)
# auc
cv.auc[j,i] = auc[[3]]
}
}
# 划分训练验证
j = 1
# dataset = df_train
train_dat = dataset[-cv_list[[j]],]
validation_dat = dataset[cv_list[[j]],]
X_val = cbind(rep(1,nrow(validation_dat)),
validation_dat[,-ncol(validation_dat)]) %>%
as.matrix()
Y_val = validation_dat[ncol(validation_dat)] %>% as_vector()
# k-1折训练
X_train = cbind(rep(1,nrow(train_dat)),
train_dat[,-ncol(train_dat)]) %>%
as.matrix()
Y_train = train_dat[,ncol(train_dat)] %>% as_vector()
maxIterNum = 10000              # 最大迭代数
step = 0.01                    # 学习步长
W = rep(0, ncol(X_train))       # 初始参数值
m = nrow(X_train)
sigmoid = function(z) { 1 / (1 + exp(-z))}  # sigmoid函数
for (l  in 1:maxIterNum){
grad = t(X_train) %*% (sigmoid(X_train %*% W)-Y_train)# 梯度
if (sqrt(as.numeric(t(grad) %*% grad)) < 1e-8){
print(sprintf('iter times=%d', l))
break
}
W = W - grad * step - step*lambda*sign(W)
}
dat = iris %>% dplyr::filter(Species != "setosa")
library(LRBL)
library(LRBL)
?sample.int
sample.int(1e10, 12)
library(LRBL)
?sample
sam_id = sample(1:nrow(dat),nrow(dat)*0.75,replace = FALSE)
sample(1:nrow(dat),nrow(dat)*0.75,replace = FALSE)
library(LRBL)
library(LRBL)
utils
install.packages("utils")
install.packages("utils")
install.packages("utils")
install.packages("utils")
library(LRBL)
globalVariables(c("penalty", "dat_list", "dat_test","dat_train"))
library(LRBL)
library(LRBL)
library(LRBL)
?CV_split
library(LRBL)
library(LRBL)
usethis::use_data_raw()
library(tidyverse)
CHD_df = read_csv("C:\\Users\\asus\\Desktop\\CHD_dat")
CHD_df = read_csv("C:\\Users\\asus\\Desktop\\CHD_dat")
CHD_df = read_csv("C:\\Users\\asus\\Desktop\\CHD_dat.csv")
usethis::use_data(CHD_df, overwrite = TRUE)
load("D:/R_Project/my_package/LRBL/data/CHD_df.rda")
library(LRBL)
?CHD_df
?CHD_df
library(LRBL)
?CHD_df
library(LRBL)
help(package = "LRBL")
library(LRBL)
library(LRBL)
?CHD_df
?mtcars
?CHD_df
library(LRBL)
library(LRBL)
library(LRBL)
library(LRBL)
?globalVariables
library(LRBL)
library(LRBL)
library(LRBL)
library(LRBL)
library(LRBL)
